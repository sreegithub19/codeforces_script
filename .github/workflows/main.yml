name: C# Hello World CI

on:
  push:
    branches:
      - c_sharp
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Set up .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.x'  # Specify the .NET version you want

    # - name: Create C# Project
    #   run: |
    #     dotnet new console -n HelloWorld

    # - name: Write Hello World Program
    #   run: |
    #       cat <<EOF > HelloWorld/HelloWorld.csproj
    #       <Project Sdk="Microsoft.NET.Sdk">

    #         <PropertyGroup>
    #           <OutputType>Exe</OutputType>
    #           <TargetFramework>net6.0</TargetFramework>  <!-- You can specify a different version if needed -->
    #           <StartupObject>HelloWorld.Program</StartupObject>  <!-- Specify the entry point class -->
    #         </PropertyGroup>

    #         <ItemGroup>
    #           <!-- Add any package references here if needed -->
    #           <!-- <PackageReference Include="SomePackage" Version="1.0.0" /> -->
    #         </ItemGroup>

    #       </Project>

    #       EOF

    # - name: Write Hello World Program
    #   run: |
    #           cat <<EOF > HelloWorld/first.cs
    #           using System;
              
    #           namespace HelloWorld
    #           {
    #               public class first
    #               {
    #                   public static void Main()
    #                   {
    #                       Console.WriteLine("Hello, World from first.cs");
    #                   }
    #               }
    #           }
    #           EOF

    # - name: Write Hello World Program
    #   run: |
    #       cat <<EOF > HelloWorld/Program.cs
    #       using System;
          
    #       namespace HelloWorld
    #       {
    #           public class Program
    #           {
    #               public static void Main(string[] args)
    #               {
    #                   Console.WriteLine("Hello, World from Program.cs");
    #                   first.Main();  // Call the method from FirstProgram
    #               }
    #           }
    #       }
    #       EOF


    - name: Build the Project
      run: dotnet build HelloWorld/HelloWorld.csproj

    - name: Run the Project
      run: dotnet run --project HelloWorld/HelloWorld.csproj

    - name: Run the Standalone file
      run: csc standalone.cs && ls -la && chmod +x standalone.exe && ./standalone.exe



    - name: Install dotnet-script
      run: |
        dotnet tool install -g dotnet-script
        export PATH="$PATH:/home/runner/.dotnet/tools"
    - name: Run inline C# code
      run: |
       echo 'Console.WriteLine("Hello from C# Interactive in GitHub Actions!");' | csi
    - name: Run multiline C# code
      run: |
        csi <<EOF
        using System;
        public class Program
        {
            public static void Main()
            {
                Console.WriteLine("Hello from C# Interactive in GitHub Actions multiline!");
                Console.WriteLine("This is a multiline C# code example.");
            }
        }
        Program.Main();
        EOF
    - name: Run multiline nested C# code
      run: |
        csi <<EOF
        using System;
        using System.Diagnostics;
        public class Program
        {
            public static void Main()
            {
                // Define the Python command as a multiline string
                string pythonCommand = @"
        print('Hello from Python!')
        x = 9
        y = 10
        print(f'The sum here of {x} and {y} is {x + y}.')
        ";
                // Create a new process
                ProcessStartInfo processInfo = new ProcessStartInfo
                {
                    FileName = "python", // Adjust this to "python3" if needed
                    Arguments = $"-c \"{pythonCommand}\"", // The command to execute
                    RedirectStandardOutput = true, // Redirect output to read it
                    RedirectStandardError = true, // Redirect error output
                    UseShellExecute = false, // Required for redirection
                    CreateNoWindow = true // Do not create a window
                };
                using (Process process = new Process())
                {
                    process.StartInfo = processInfo;
                    // Start the process
                    process.Start();
                    // Read the output (or error)
                    string output = process.StandardOutput.ReadToEnd();
                    string error = process.StandardError.ReadToEnd();
                    // Wait for the process to finish
                    process.WaitForExit();
                    // Print output and error (if any)
                    Console.WriteLine("Output:");
                    Console.WriteLine(output);
                    if (!string.IsNullOrEmpty(error))
                    {
                        Console.WriteLine("Error:");
                        Console.WriteLine(error);
                    }
                }
            }
        }
        Program.Main();
        EOF
