name: Build and Test WebAssembly (Node.js)

on:
  push:
    branches:
      - web_assembly_

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository code
      - name: Checkout repository
        uses: actions/checkout@v2

## RUST WITH WASM

      - name: Install C++ Compiler
        run: sudo apt-get install g++

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
         toolchain: stable  # Use the stable version of Rust

      # Step 3: Add wasm32-wasi target
      - name: Add wasm32-wasi target
        run: rustup target add wasm32-wasip1

      # Step 4: Install Wasmtime CLI (WASI runtime)
      - name: Install Wasmtime
        run: |
          curl https://wasmtime.dev/install.sh -sSf | bash
          echo "$HOME/.wasmtime/bin" >> $GITHUB_PATH  # Add Wasmtime to the PATH

      # Step 3: Build the project
      - name: Build the project
        run: |
         cargo build --release

      # Step 4: Run the project (this will print output to the Actions log)
      - name: Run the program
        run: cargo run      #  or cargo run --bin your_binary_name (cargo run --bin src/main.rs)

## NODEJS WITH RUST AND WASI

      # Step 2: Set up Node.js environment
      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '18'

      # Step 3: Install dependencies (including AssemblyScript or other WASM tools)
      - name: Install dependencies
        run: |
          npm install

      # Step 4: Build WebAssembly module (using AssemblyScript, for example)
      - name: Build WebAssembly
        run: |
          npm run build

      # Step 5: Run tests to ensure the WebAssembly module works with Node.js
      - name: Run tests
        run: |
          npm test
          node wasi_rust_in_node.js
          node memfs_rust.js