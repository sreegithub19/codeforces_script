name: C# Hello World CI

on:
  push:
    branches:
      - c_sharp
  pull_request:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up .NET
        uses: actions/setup-dotnet@v1
        with:
          dotnet-version: '6.x'  # Or your desired .NET version

      # Standard .NET Project
      - name: Create and Build .NET Project
        run: |
          dotnet new console -n HelloWorld
          cd HelloWorld
          dotnet build

      - name: Run .NET Project
        run: dotnet run
        working-directory: HelloWorld # Make sure we are in the correct directory

      # Standalone C# File Compilation and Execution
      - name: Compile and Run Standalone C# File
        run: |
          # Install the dotnet SDK, if not already installed
          sudo apt-get update
          sudo apt-get install -y dotnet-sdk-6.0 # Or the version you are using

          csc standalone.cs # Compile the standalone C# file
          chmod +x standalone.exe # Make the executable runnable
          ./standalone.exe       # Execute

      # dotnet-script
      - name: Install dotnet-script
        run: dotnet tool install -g dotnet-script

      - name: Add dotnet tools to the path
        run: echo "::add-path::/home/runner/.dotnet/tools"

      - name: Run inline C# code
        run: |
          dotnet-script -c "Console.WriteLine(\"Hello from C# Interactive in GitHub Actions!\");"

      - name: Run multiline C# code
        run: |
          dotnet-script <<EOF
          using System;

          public class Program
          {
              public static void Main()
              {
                  Console.WriteLine(\"Hello from C# Interactive in GitHub Actions multiline!\");
                  Console.WriteLine(\"This is a multiline C# code example.\");
              }
          }

          Program.Main();
          EOF

      - name: Run multiline nested C# code with Python
        run: |
          dotnet-script <<EOF
          using System;
          using System.Diagnostics;

          public class Program
          {
              public static void Main()
              {
                  // Define the Python command as a multiline string
                  string pythonCommand = @"
          print('Hello from Python!')
          x = 9
          y = 10
          print(f'The sum here of {x} and {y} is {x + y}.')
          ";

                  // Create a new process
                  ProcessStartInfo processInfo = new ProcessStartInfo
                  {
                      FileName = "python", // Ensure python is in the PATH
                      Arguments = $"-c \"{pythonCommand}\"",
                      RedirectStandardOutput = true,
                      RedirectStandardError = true,
                      UseShellExecute = false,
                      CreateNoWindow = true
                  };

                  using (Process process = new Process())
                  {
                      process.StartInfo = processInfo;
                      process.Start();

                      string output = process.StandardOutput.ReadToEnd();
                      string error = process.StandardError.ReadToEnd();

                      process.WaitForExit();

                      Console.WriteLine("Output:");
                      Console.WriteLine(output);
                      if (!string.IsNullOrEmpty(error))
                      {
                          Console.WriteLine("Error:");
                          Console.WriteLine(error);
                      }
                  }
              }
          }
          Program.Main();
          EOF
